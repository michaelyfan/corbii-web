
Frontend:
- use something better looking than <input type='file' ...
- "If I press new card I think it should automatically select the text box so I can start typing" - Hank Hellstrom
- make profile settings option stick to bottom of side bar
- stuff is off-centered when you're viewing a deck or conceptlist that isn't yours
- make footer stick to bottom of site
- fix search ui (is it working??)
- ConceptList.js should use the autoresize text input
- center StudyConcept.js box, no matter what the arrows are. There is apparently a way to justify single flexbox items:
  - https://stackoverflow.com/questions/23621650/how-to-justify-a-single-flexbox-item-override-justify-content

Backend:
- determining signin flow with conceptlist and deck (which are pages that don't require signin, but use firebase.auth().currentUser) is wrong. Functional atm, but could cause problems down the line.

- when you delete a card or concept, delete data accordingly. You now have the capability to do this. Consider doing it with Cloud Functions.
  - or not.
- (*very* eventually) cache data where possible instead of retrieving every time
- show intervals next to card studying options
- add robots file to disallow web scrapers (or something?)
- show intervals next to card studying options
- automatically updating isDue field in Firestore (somehow...) instead of updating on retrieval
- implement structure necessary for a study history
- should I deploy as a Node app and use a server, or deploy as a static app and use Cloud Functions?
- set up budget alerts and spending/api caps on Firebase

Fullstack:
- teacher features.
  - implement actual data pulling
  - add checks for inputs
  - implement study timecount in seconds
- run everything through eslint eventually (before pushing to production)
- maintain array of inputs for conceptlist studying instead of one constant input
- (eventually) before you deploy:
  - follow this: https://github.com/rotati/wiki/wiki/Deployment-and-QA-Workflow
  - run everything through eslint
  - 

- get the actual user/pass input fields working for login. 
- case 14: a login session exists. It is a teacher. The page starts on the Dashboard. 
- case 16: a teacher navigates to the Dashboard, or any other non-teacher page.
- handle different time zones
- use a webpack solution better than copy-webpack-plugin
- enforce timestamp ordering for cards
  - use server time
- implement pictures into the decks

Always:
- look at owen and hank bug testing notes



