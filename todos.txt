
Frontend:
- use something better looking than <input type='file' ...
- "If I press new card I think it should automatically select the text box so I can start typing" - Hank Hellstrom
- make profile settings option stick to bottom of side bar
- stuff is off-centered when you're viewing a deck or conceptlist that isn't yours
  - additionally, the "|" character remains when you're viewing a deck or a conceptlist that isn't yours
- make footer stick to bottom of site
- fix search ui (is it working??)
- ConceptList.js should use the autoresize text input
- center StudyConcept.js box, no matter what the arrows are

Backend:
- implement new override algorithm
- compress profile pictures that come in.
- cache data where possible and most efficient instead of retrieving every time
- add robots file to disallow web scrapers (or something?)
- show intervals next to card studying options
- automatically updating isDue field in Firestore (somehow...) instead of updating on retrieval
- implement structure necessary for a study history
- should I deploy as a Node app and use a server, or deploy as a static app and use Cloud Functions?

Fullstack:
1/7/2019
- might have to revamp teacher features. components should separate concerns (shouldn't have to handle teacher and student simultaneously) and I'm not a fan of all the mixing i thought up in the summertime. Will be more tedious to make separate components for teachers, but, following the advice of Tyler McGinnis, those components will be easier to delete which implies they're ultimately more scalable. And it'll be way easier to understand and sift through.

- move todos to README.md

- teacher features.
  - implement actual data pulling
  - add checks for inputs
  - implement study timecount in seconds
- back to the correct location when reaching a deck (either from search or from dashboard)
- maintain array of inputs for conceptlist studying instead of one constant input
- run everything through eslint eventually (before pushing to production)
- get the actual user/pass input fields working for login. 
- case 14: a login session exists. It is a teacher. The page starts on the Dashboard. 
- case 16: a teacher navigates to the Dashboard, or any other non-teacher page.
- handle different time zones
- use a webpack solution better than copy-webpack-plugin
- enforce timestamp ordering for cards
  - use server time
- implement pictures into the decks
- (eventually) before you deploy:
  - follow this: https://github.com/rotati/wiki/wiki/Deployment-and-QA-Workflow
  - run everything through eslint