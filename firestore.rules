service cloud.firestore {
  match /databases/{database}/documents {
    
    function isSignedIn() {
      return request.auth != null;
    }
    
    match /users/{userId} {
      allow read: if true;
      
      allow create, update: if isSignedIn() && request.auth.uid == userId;
      
      allow delete: if false;
    }

    match /decks/{deckId} {
      function userIsStudentOfDeck() {
        return get(/databases/$(database)/documents/decks/$(deckId)).data
      }
    
      allow read: if true;
      
      // The deck's creatorId field must correspond to the user, and the deck's name
      // must be less than 150 characters long.
      allow create: if isSignedIn()
        && request.auth.uid == request.resource.data.creatorId
        && request.resource.data.name.size() <= 150;

      // allow a deck update if:
      // updater is deck's creator
      // name no more than 150 characters if it's being updated
      allow update: if request.auth.uid == resource.data.creatorId
        && request.resource.data.name.size() <= 150
        && request.resource.data.creatorId == resource.data.creatorId
        && request.resource.data.creatorName == resource.data.creatorName;
                    
      allow delete: if request.auth.uid == resource.data.creatorId;

      function deckData() {
        return get(/databases/$(database)/documents/decks/$(deckId)).data;
      }

      match /cards/{cardId} {
        allow read: if true;
        
        allow create, update: if request.auth.uid == deckData().creatorId
                              && request.resource.data.front.size() <= 1000
                              && request.resource.data.back.size() <= 1000;

        allow delete: if request.auth.uid == deckData().creatorId;
      }
    }

    match /spacedRepData/{dataId} {
      allow read: if true;
      allow create: if request.auth.uid == request.resource.data.userId;
      allow update: if request.auth.uid == resource.data.userId;
      allow delete: if false;
    }

  }
}
