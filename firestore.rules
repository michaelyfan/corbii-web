service cloud.firestore {
  match /databases/{database}/documents {
    
    function isSignedIn() {
      return request.auth != null;
    }
    
    function userIsTeacher() {
      return isSignedIn()
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isTeacher == true;
    }
    
    function userIsStudentOfClassroom(classroomId) {
      return isSignedIn()
        && exists(/databases/$(database)/documents/classrooms/$(classroomId)/users/$(request.auth.uid));
    }
    
    function userIsTeacherOfClassroom(classroomId) {
      return isSignedIn()
        && request.auth.uid == get(/databases/$(database)/documents/classrooms/$(classroomId)).data.teacherId;
    }
  
    match /users/{userId} {
      allow read: if true;
      
      allow create, update: if isSignedIn() && request.auth.uid == userId;
      
      allow delete: if false;
    }

    match /decks/{deckId} {
      function userIsStudentOfDeck() {
        return get(/databases/$(database)/documents/decks/$(deckId)).data
      }
    
      // allow a deck read if one of the following is met:
      // 1) a deck is not classroom-private
      // 2) the user is the deck's creator (handles teacher accessing teacher decks)
      // 3) the user is a student in the deck's classroom (applies to classroom-private decks)
      allow read: if !("isClassroomPrivate" in resource.data)
        || (isSignedIn() && request.auth.uid == resource.data.creatorId)
        || userIsStudentOfClassroom(resource.data.classroomId);
      
      // allow a deck create if:
      // 1) it's not a class deck
      // 2) it is a class deck but the user is a teacher of the deck's classroomId
      // 
      // In all cases the deck's creatorId field must correspond to the user, and the deck's name
      // must be less than 150 characters long.
      allow create: if isSignedIn()
        && request.auth.uid == request.resource.data.creatorId
        && request.resource.data.name.size() <= 150
        && (!("isClassroomPrivate" in request.resource.data)
          || request.resource.data.isClassroomPrivate == false
          || userIsTeacherOfClassroom(request.resource.data.classroomId));
                    
      allow update: if request.auth.uid == resource.data.creatorId
                    && request.resource.data.name.size() <= 150;
                    
      allow delete: if request.auth.uid == resource.data.creatorId;

      function deckData() {
        return get(/databases/$(database)/documents/decks/$(deckId)).data;
      }

      match /cards/{cardId} {
        allow read: if true;
        
        allow create, update: if request.auth.uid == deckData().creatorId
                              && request.resource.data.front.size() <= 1000
                              && request.resource.data.back.size() <= 1000;

        allow delete: if request.auth.uid == deckData().creatorId;
      }

    }

    match /lists/{listId} {
      allow read: if true;
      allow create: if request.auth.uid == request.resource.data.creatorId
                    && request.resource.data.name.size() <= 150;
      allow update: if request.auth.uid == resource.data.creatorId
                    && request.resource.data.name.size() <= 150;
      allow delete: if request.auth.uid == resource.data.creatorId;

      function listData() {
        return get(/databases/$(database)/documents/lists/$(listId)).data;
      }

      match /concepts/{conceptId} {
        allow read: if true;
        allow create, update: if request.auth.uid == listData().creatorId
                              && request.resource.data.question.size() <= 200;

        allow delete: if request.auth.uid == listData().creatorId;
      }
    }

    match /spacedRepData/{dataId} {
      allow read: if true;
      allow create: if request.auth.uid == request.resource.data.userId;
      allow update: if request.auth.uid == resource.data.userId;
      allow delete: if false;
    }

    match /selfExData/{dataId} {
      allow read: if true; 
      allow create: if request.auth.uid == request.resource.data.userId
        && request.resource.data.answer.size() <= 4000;
      allow update: if request.auth.uid == resource.data.userId
        && request.resource.data.answer.size() <= 4000;
      allow delete: if false;
    }

    match /classrooms/{classroomId} {
      allow read: if (userIsTeacher()
        && request.auth.uid == resource.data.teacherId)
          || userIsStudentOfClassroom(classroomId);
      
      allow create: if userIsTeacher()
        && request.auth.uid == request.resource.data.teacherId
        && request.resource.data.name != null
        && request.resource.data.periods != null
        && request.resource.data.name.size() <= 75
        && request.resource.data.periods.size() <= 15;

      allow update: if userIsTeacher()
        && request.auth.uid == resource.data.teacherId;

      allow delete: if userIsTeacher()
        && request.auth.uid == resource.data.teacherId;

      function classroomData() {
        return get(/databases/$(database)/documents/classrooms/$(classroomId)).data;
      }

      match /users/{userId} {
        allow read: if userIsStudentOfClassroom(classroomId)
          || request.auth.uid == classroomData().teacherId;

        allow create: if request.auth.uid == classroomData().teacherId || request.auth.uid == userId;

        allow update: if request.auth.uid == classroomData().teacherId || request.auth.uid == userId;

        allow delete: if request.auth.uid == classroomData().teacherId;
      }
    }

    match /classSpacedRepData/{id} {
      allow read: if userIsTeacherOfClassroom(resource.data.classroomId);

      allow create: if userIsStudentOfClassroom(request.resource.data.classroomId)
        && request.auth.uid == request.resource.data.userId;

      allow update: if false;

      allow delete: if userIsTeacherOfClassroom(resource.data.classroomId);
    }

  }
}
