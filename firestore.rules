service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow read: if true;
      allow create, update: if request.auth.uid == userId;
      allow delete: if false;
    }

    match /decks/{deckId} {
      allow read: if true;
      allow create: if request.auth.uid == request.resource.data.creatorId
                    && request.resource.data.name.size() <= 150;
      allow update: if request.auth.uid == resource.data.creatorId
                    && request.resource.data.name.size() <= 150;
      allow delete: if request.auth.uid == resource.data.creatorId;

      function deckData() {
        return get(/databases/$(database)/documents/decks/$(deckId)).data;
      }

      match /cards/{cardId} {
        allow read: if true;
        allow create, update: if request.auth.uid == deckData().creatorId
                              && request.resource.data.front.size() <= 1000
                              && request.resource.data.back.size() <= 1000;

        allow delete: if request.auth.uid == deckData().creatorId;
      }

    }

    match /lists/{listId} {
      allow read: if true;
      allow create: if request.auth.uid == request.resource.data.creatorId
                    && request.resource.data.name.size() <= 150;
      allow update: if request.auth.uid == resource.data.creatorId
                    && request.resource.data.name.size() <= 150;
      allow delete: if request.auth.uid == resource.data.creatorId;

      function listData() {
        return get(/databases/$(database)/documents/lists/$(listId)).data;
      }

      match /concepts/{conceptId} {
        allow read: if true;
        allow create, update: if request.auth.uid == listData().creatorId
                              && request.resource.data.question.size() <= 200;

        allow delete: if request.auth.uid == listData().creatorId;
      }
    }

    match /spacedRepData/{dataId} {
      allow read: if true;
      allow create: if request.auth.uid == request.resource.data.userId;
      allow update: if request.auth.uid == resource.data.userId;
      allow delete: if false;
    }

    match /selfExData/{dataId} {
      allow read: if true; 
      allow create: if request.auth.uid == request.resource.data.userId
        && request.resource.data.answer.size() <= 4000;
      allow update: if request.auth.uid == resource.data.userId
        && request.resource.data.answer.size() <= 4000;
      allow delete: if false;
    }
    
    function userIsTeacher() {
      return request.auth.uid != null
        && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isTeacher == true;
    }

    match /classrooms/{classroomId} {
      function userIsTeacherOfClass() {
        return userIsTeacher() && request.auth.uid == resource.data.teacherId;
      }

      function userIsTeacherOfClassOnCreate() {
        return userIsTeacher() && request.auth.uid == request.resource.data.teacherId;
      }

      function userIsStudentOfClass() {
        return exists(/databases/$(database)/documents/classrooms/$(classroomId)/users/$(request.auth.uid));
      }

      allow read: if userIsTeacherOfClass() || userIsStudentOfClass();
      
      allow create: if userIsTeacherOfClassOnCreate()
                      && request.resource.data.name != null
                      && request.resource.data.periods != null
                      && request.resource.data.name.size() <= 75
                      && request.resource.data.periods.size() <= 15;
      allow update: if userIsTeacherOfClass();
      allow delete: if userIsTeacherOfClass();

      function classroomData() {
        return get(/databases/$(database)/documents/classrooms/$(classroomId)).data;
      }

      match /users/{userId} {
        allow read: if userIsStudentOfClass()
          || request.auth.uid == classroomData().teacherId;
        allow create: if request.auth.uid == classroomData().teacherId || request.auth.uid == userId;
        allow update: if request.auth.uid == classroomData().teacherId || request.auth.uid == userId;
        allow delete: if request.auth.uid == classroomData().teacherId;
      }
    }

    match /classSpacedRepData/{id} {
      function userIsTeacherOfClass() {
        return request.auth.uid == get(/databases/$(database)/documents/classrooms/$(resource.data.classroomId)).data.teacherId;
      }

      allow read: if userIsTeacherOfClass();
      allow create: if exists(/databases/$(database)/documents/classrooms/$(request.resource.data.classroomId)/users/$(request.auth.uid))
        && request.auth.uid == request.resource.data.userId;
      allow update: if false;
      allow delete: if userIsTeacherOfClass();
    }

  }
}
